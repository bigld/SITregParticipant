'use strict';
var fs = require('fs');
var path = require('path');

module.exports = function(grunt) {

    // checks if the 'Component.js' file is in the root folder
    var bIsComponentUnderRoot = isComponentInCurrentFolder(process.cwd());
    var componentParentDir = bIsComponentUnderRoot ? '.' : getComponentParent(process.cwd());

    var tmpDir = "dist/tmp";
    var preloadSources = [
        '**/*.js',
        '**/changes-bundle.json',
        '**/*.fragment.html',
        '**/*.fragment.json',
        '**/*.fragment.xml',
        '**/*.view.html',
        '**/*.view.json',
        '**/*.view.xml',
        '**/*.properties',
        'manifest.json',
        '!**/node_modules/**',
        '!neo-app.json'
    ];

    var projectRootSources = ['xs-app.json'];

    var dbgSources = ['**/*.js',
        '!**/node_modules/**',
        '!neo-app.json'
    ];

    var rootProjectSources = ['**/*.js',
        '**/*.fragment.html',
        '**/*.fragment.json',
        '**/*.fragment.xml',
        '**/*.view.html',
        '**/*.view.json',
        '**/*.view.xml',
        '!**/node_modules/**',
        '!neo-app.json'
    ];

    function getRootDir(){
        var sRes = '<%= pkg.name %>';
        var sComponentFile = componentParentDir + "/Component.js";
        if (grunt.file.exists(sComponentFile)){
            var fileContent = grunt.file.read(sComponentFile);
            var sReg  = '.extend\\(\\"(.*).';
            var oRegex = new RegExp(sReg + 'Component\\"');
            var aMatches = oRegex.exec(fileContent);
            if (aMatches) {
                sRes = aMatches[1];
                sRes = sRes.replace(/\./g, "/");
            }
        }
        return sRes;
    };

// checks if Component.js file is on root
    function isComponentInCurrentFolder(path){
        var files = fs.readdirSync(path);
        for(var i=0; i < files.length; i++) {
            var file = files[i];
            if (file === 'Component.js') {
                return true;
            }
        }
        return false;
    };

// returns the path of the folder that holds the Component.js file relatively to the root folder
//  or '.' if file is under the root folder. The function will return null if file is not found
    function getComponentParent(curPath) {
        var inCurrentFolder = isComponentInCurrentFolder(curPath);
        var files = fs.readdirSync(curPath);
        for(var i=0; i < files.length; i++){
            var file = files[i];
            if (file === 'Component.js'){
                curPath = curPath.replace(path.join(process.cwd(),"\\"), "");
                return curPath == process.cwd() ? "." : curPath;
            }
            var newPath = path.join(curPath,file);
            if (file != 'dist' && file != 'node_modules' && fs.lstatSync(newPath).isDirectory() && !inCurrentFolder){
                var foundPath = getComponentParent(newPath);
                if (foundPath) {
                    // Checks if relative path contains only the folder from the root
                    // May contain temp relative path that will effect the build process (neo-app)
                    // Example of temp relative path: //usr/wrk/tmp.DXIFZKDXvv/proj/webapp
                    if (foundPath.indexOf('proj') > -1) {
                        // Remove temp relative path - keep only folders structure that contain Components.js
                        var parts = [];
                        parts = foundPath.split("proj/");
                        foundPath = parts.pop();
                    }
                    if (foundPath.indexOf('proj') > -1)
                        foundPath = foundPath.substr(foundPath.indexOf('proj') + 5);
                    return foundPath;
                }
            }
        }
    };

// Creates or updates the resource.json file with the paths of all the files in the project
    var resources = [];
    function createResourceJson(Path){
        var sJsonContent = {};
        var jsonContent;
        createResource(Path);
        sJsonContent.resources = resources;
        jsonContent = JSON.stringify(sJsonContent, null, 4);
        fs.writeFileSync(path.join(Path,"resources.json"), jsonContent);
    }

    var cacheBusterInfoJsonResources = {};
    function createCachebusterInfoJson(Path){
        grunt.log.writeln("starting running createCachebusterInfoJson");
        createSapUICacheBusterInfoJsonResource(Path);
        var jsonCachebusterContent = JSON.stringify(cacheBusterInfoJsonResources, null, 2);
        fs.writeFileSync(path.join(Path,"sap-ui-cachebuster-info.json"), jsonCachebusterContent);
        grunt.log.writeln("finish running createCachebusterInfoJson");
    }

// Adds files to resources array in order to create the sap-ui-cachebuster-info.json file
    function createSapUICacheBusterInfoJsonResource (curPath) {
        var relativePath = path.relative(process.cwd(), curPath);
        if (relativePath.indexOf("dist") >= 0)
            relativePath = path.relative("dist", relativePath);

        var files = fs.readdirSync(curPath);
        for(var i=0; i < files.length; i++){
            var fileName = files[i];
            var newPath = path.join(curPath,fileName);
            if (fs.lstatSync(newPath).isDirectory()) {
                if (fileName != 'dist' && fileName != 'node_modules')
                    createSapUICacheBusterInfoJsonResource(newPath);
            }
            else {
                if (fileName != 'sap-ui-cachebuster-info.json') {
                    var relatetiveFileName = path.normalize (path.join (relativePath, fileName)).replace(new RegExp('\\' + path.sep, 'g'), '/');
                    var fileNameFull = path.normalize (path.join (curPath, fileName));
                    var lastModifiedTime = fs.lstatSync (fileNameFull).mtime.getTime ();
                    cacheBusterInfoJsonResources[relatetiveFileName] = lastModifiedTime;
                }
            }
        }
    };

// Adds files to resources array in order to create / update the resource.json file
    function createResource (curPath) {
        var relativePath = path.relative(process.cwd(), curPath);
        if (relativePath.indexOf("dist") >= 0)
            relativePath = path.relative("dist", relativePath);

        var files = fs.readdirSync(curPath);
        for(var i=0; i < files.length; i++){
            var resource = {};
            var fileName = files[i];
            var sSuffix = path.extname(path.join(curPath, fileName));
            resource.name = path.normalize(path.join(relativePath, fileName));

            if (fileName === "Component-preload.js" || fileName === "resources.json")
                resource.merged = true;

            if (sSuffix === ".properties" && fileName.indexOf("i18n") > -1)
                resource.raw = path.join("i18n","i18n.properties");

            else if (sSuffix === ".properties" && fileName.indexOf("messageBundle") > -1)
                resource.raw = "messageBundle.properties";

            if (resource.raw) {
                var start = fileName.indexOf("_");
                var end = fileName.indexOf(".properties");
                if (start > -1 && end > -1)
                    resource.locale = fileName.substring(start, end);
            }

            if (fileName.indexOf("-dbg") > 0)
                resource.isDebug = true

            var newPath = path.join(curPath,fileName);
            if (fileName != 'dist' && fileName != 'node_modules' && fs.lstatSync(newPath).isDirectory())
                var foundPath = createResource(newPath);
            else
                resources.push(resource);
        }
    };

    grunt.initConfig({

        pkg: grunt.file.readJSON('package.json'),

        dir: {
            appFolder: componentParentDir,
            projectRoot: process.cwd(),
            dist: 'dist',
            root: getRootDir(),
            tmpDir : 'dist/tmp',
            tmpDirDbg : 'dist/tmp-dbg'
        },

        openui5_preload: {
            preloadDbg: {
                options: {
                    resources: {
                        cwd:  '<%= dir.tmpDirDbg %>',
                        src: dbgSources,
                        prefix: '<%= dir.root %>'
                    },
                    compress: false,
                    dest:  '<%= dir.tmpDirDbg %>'
                },
                components: true
            },
            preloadTmp: {
                options: {
                    resources: {
                        cwd: '<%= dir.tmpDir %>',
                        src: preloadSources,
                        prefix: '<%= dir.root %>'
                    },
                    compress: false,
                    dest: '<%= dir.tmpDir %>'
                },
                components: true
            },
            preloadRootProject: {
                options: {
                    resources: {
                        cwd:  '<%= dir.appFolder %>',
                        src: rootProjectSources,
                        prefix: '<%= dir.root %>'
                    },
                    compress: false,
                    dest:  '<%= dir.appFolder %>'
                },
                components: true
            }
        },

        clean: {
            dist: '<%= dir.dist %>/'
        },

        copy: {
            copyProjectFilesToDist: {
                files: [
                    {
                        expand: true,
                        src: projectRootSources,
                        dest:'<%= dir.dist %>',
                        cwd: '<%= dir.projectRoot %>'
                    }]
            },
            copyToDbg: {
                files: [
                    {
                        expand: true,
                        src: dbgSources,
                        dest: '<%= dir.tmpDirDbg %>',
                        cwd: '<%= dir.appFolder %>',
                        filter: function(filepath) {
                            // prevent js from localService to be copied
                            return !filepath.match(new RegExp('<%= dir.appFolder %>' + '(\\/|\\\\)localService', 'gi'));
                        }
                    },
                    {
                        expand: true,
                        src: '**/*.css',
                        dest: '<%= dir.tmpDirDbg %>',
                        cwd: '<%= dir.appFolder %>'
                    }
                ]
            },
            copyToTmp: {
                files: [
                    {
                        expand: true,
                        src: preloadSources,
                        dest: '<%= dir.tmpDir %>',
                        cwd: '<%= dir.appFolder %>',
                        filter: function(filepath) {
                            // prevent js from localService to be copied
                            return !filepath.match(new RegExp('<%= dir.appFolder %>' + '(\\/|\\\\)localService', 'gi'));
                        }
                    },
                    {
                        expand: true,
                        src: '**/*.css',
                        dest: '<%= dir.tmpDir %>',
                        cwd: '<%= dir.appFolder %>'
                    },
                    {
                        expand: true,
                        src: 'localService/metadata.xml',
                        dest: '<%= dir.tmpDir %>',
                        cwd: '<%= dir.appFolder %>'
                    },
                    {
                        expand: true,
                        src: '**/*',
                        dest: '<%= dir.tmpDir %>',
                        cwd: '<%= dir.appFolder %>',
                        filter: function(filepath) {
                            // prevent js and css files and contents of appFolder from being copied
                            return !filepath.match(new RegExp("(" + componentParentDir + "(\\/|\\\\)${componentParentDir}(\\/|\\\\)localService|\\.css$|\\test.html$)", "gi"));                        }
                    }]
            },
            copyDbgToDist: {
                files: [
                    {
                        expand: true,
                        src: dbgSources,
                        dest:'<%= dir.dist %>',
                        cwd: '<%= dir.tmpDirDbg %>',
                        rename: function(dest, src) {
                            return dest + '/' + src.replace(/((\.view|\.fragment|\.controller)?\.js)/, '-dbg$1');
                        }
                    },
                    {
                        expand: true,
                        src: '**/*.css',
                        dest: '<%= dir.dist %>',
                        cwd: '<%= dir.tmpDirDbg %>',
                        rename: function(dest, src) {
                            return dest + '/' + src.replace('.css', '-dbg.css');
                        }
                    }]
            },
            copyTmpToDist: {
                files: [
                    {
                        expand: true,
                        src: 'Component-preload.js',
                        dest: '<%= dir.dist %>',
                        cwd: '<%= dir.tmpDir %>'
                    },
                    {
                        expand: true,
                        src: '**/*',
                        dest: '<%= dir.dist %>',
                        cwd: '<%= dir.tmpDir %>',
                        filter: function(filepath) {
                            // prevent js and css files and contents of appFolder from being copied
                            return !filepath.match(new RegExp("(" + tmpDir + "(\\/|\\\\)${tmpDir}(\\/|\\\\)localService|\\.css$|\\test.html$)", "gi"));        }
                    }]
            }
        },
        mkdir: {
            dist: {
                options: {
                    create: ['<%= dir.dist %>']
                }
            }
        },
        'cssmin': {
            build: {
                files: [
                    {
                        expand: true,
                        src: '**/*.css',
                        dest: '<%= dir.dist %>',
                        cwd: '<%= dir.appFolder %>'
                    }]
            }
        },
        'uglify': {
            uglifyTmp: {
                files: [
                    {
                        expand: true,
                        src: '**/*.js',
                        dest: '<%= dir.tmpDir %>',
                        cwd: '<%= dir.appFolder %>',
                        filter: function(filepath) {
                            // prevent js from localService to be copied
                            return !filepath.match(new RegExp('<%= dir.appFolder %>' + '(\\/|\\\\)localService', 'gi'));
                        }
                    }]
            },
            uglifyPreload: {
                files: [
                    {
                        expand: true,
                        src: '<%= dir.tmpDir %>' + '/Component-preload.js'
                    }]
            },
            uglifyRootPreload: {
                files: [
                    {
                        expand: true,
                        src: '<%= dir.appFolder %>' + '/Component-preload.js'
                    }]
            }
        }
    });

    grunt.loadNpmTasks('grunt-contrib-clean');
    grunt.loadNpmTasks('grunt-contrib-copy');
    grunt.loadNpmTasks('grunt-contrib-uglify');
    grunt.loadNpmTasks('grunt-contrib-cssmin');
    grunt.loadNpmTasks('grunt-mkdir');
    grunt.loadNpmTasks('grunt-openui5');

    grunt.registerTask('lint', 'lint project', function () {
        //validateFiles
        var coreLibs = require('@sap/di.code-validation.core');
        var validationMetadata = new coreLibs.validationMetadata(path.join(grunt.config.data.dir.appFolder,'..'));
        var fileUtils = coreLibs.fileUtils;
        var allResults = {};
        grunt.registerTask('lint-js', function () {
            var done = this.async();
            grunt.log.writeln("validation metadata:" + validationMetadata);
            grunt.log.writeln("project root path:" + validationMetadata.getRootPath());
            fileUtils.listFilteredFiles(validationMetadata.getRootPath(), {
                extensions: [".js"],
                ignoredPaths: [path.join(grunt.config.data.dir.appFolder, '..', 'node_modules'), grunt.config.data.dir.dist]
            }, function (files) {
                var fileResources = [];
                files.forEach(function (filePath) {
                    var fileResource = new coreLibs.fileResource(validationMetadata.getRootPath(), filePath);
                    fileResources.push(fileResource);
                });
                var jsValidator = require('@sap/di.code-validation.js');
                var results = jsValidator.validateFiles(validationMetadata, fileResources);
                var fixed = handleResults(results, '@sap/di.code-validation.js')
                allResults['@sap/di.code-validation.js'] = fixed;
                done();
            });
        });
        grunt.registerTask('lint-xml', function () {
            var done = this.async();
            fileUtils.listFilteredFiles(validationMetadata.getRootPath(), {
                extensions: [".xml"],
                ignoredPaths: [path.join(grunt.config.data.dir.appFolder, '..', 'node_modules'), grunt.config.data.dir.dist]
            }, function (files) {
                var fileResources = [];
                files.forEach(function (filePath) {
                    var fileResource = new coreLibs.fileResource(validationMetadata.getRootPath(), filePath);
                    fileResources.push(fileResource);
                });
                var xmlValidator = require('@sap/di.code-validation.xml');
                var results = xmlValidator.validateFiles(validationMetadata, fileResources);
                var fixed = handleResults(results, '@sap/di.code-validation.xml');
                allResults['@sap/di.code-validation.xml'] = fixed;
                done();
            });
        });
        grunt.registerTask('lint-json', function () {
            var done = this.async();
            fileUtils.listFilteredFiles(validationMetadata.getRootPath(), {
                extensions: [".json"],
                ignoredPaths: [path.join(grunt.config.data.dir.appFolder, '..', 'node_modules'), grunt.config.data.dir.dist]
            }, function (files) {
                var fileResources = [];
                files.forEach(function (filePath) {
                    var fileResource = new coreLibs.fileResource(validationMetadata.getRootPath(), filePath);
                    fileResources.push(fileResource);
                });
                var jsonValidator = require('@sap/di.code-validation.json');
                return jsonValidator.validateFiles(validationMetadata, fileResources)
                    .then(function (results) {
                        var fixed = handleResults(results, '@sap/di.code-validation.json');
                        allResults['@sap/di.code-validation.json'] = fixed;
                        done();
                    });
            });
        });
        grunt.registerTask('writeLintResults', function () {

            var results = handleResults(allResults);
            var fullRestuls = {version: "1.0.0", "results": allResults};
            fs.writeFileSync(path.join(grunt.config.data.dir.dist, "di.code-validation.core_issues.json"), JSON.stringify(fullRestuls));
        });
        grunt.task.run(['lint-js', 'lint-xml', 'lint-json', 'mkdir:dist', 'writeLintResults']);

        function handleResults(results){
            var result = results || {};
            var issues = result.issues || [];
            var allIssues = {};
            var projectPath = path.join(grunt.config.data.dir.appFolder,'..');
            issues.forEach(function (issue) {
                var filePath = issue.path;
                var resultPath = path.relative(projectPath, filePath);

                issue.path = resultPath;
                allIssues[resultPath] = allIssues[resultPath] || [];
                allIssues[resultPath] = allIssues[resultPath].concat(issue);
            });
            return {"issues": allIssues};
        }
    });	// Linting task

    grunt.registerTask('devx-updateNeoApp', 'Update neo-app for build', function() {
        var bNeoAppExists = grunt.file.exists("neo-app.json");

        if (bNeoAppExists){
            var oNeoAppJsonContent = grunt.file.readJSON("neo-app.json");
            var sSourceFolderRelativePath = "/" + grunt.config.data.dir.appFolder;

            var routes = oNeoAppJsonContent.routes;
            for (var index in routes) {
                //remove source folder from path
                if (routes[index].path.indexOf(sSourceFolderRelativePath) === 0) {
                    routes[index].path = routes[index].path.substring(sSourceFolderRelativePath.length);
                }
            }

            //Remove source folder in welcome file
            var welcomeFile = oNeoAppJsonContent.welcomeFile;
            if (welcomeFile) {
                if (welcomeFile.indexOf(sSourceFolderRelativePath) === 0) {
                    oNeoAppJsonContent.welcomeFile = welcomeFile.substring(sSourceFolderRelativePath.length);
                }
            }
            else{
            }
            var newNeoappFile = grunt.config.data.dir.dist + "/neo-app.json";
            grunt.file.write(grunt.config.data.dir.dist + "/neo-app.json", JSON.stringify(oNeoAppJsonContent, null, 2));
        }
        else {
            grunt.log.writeln("no neo-app.json file found");
        }
    });

    function updateManifestDeploymentBlockUri(oManfiestDeploymentBlock){
        var sManifestUri = oManfiestDeploymentBlock.uri; //current uri in manifest
        var sSourceFolderPathInProject = grunt.config.data.dir.appFolder;
        if ((sSourceFolderPathInProject) && sSourceFolderPathInProject !== "") { //when source folder empty (root) - no update needed (paths within target and source are the same)
            var indexOfSourceFolder = sManifestUri.lastIndexOf(sSourceFolderPathInProject); //verify the specified src folder exist in current uri
            if (indexOfSourceFolder !== -1) {
                var sUriPrefix = sManifestUri.substring(0, indexOfSourceFolder); //uri prefix before the source folder path (keep the '/' before the src path)
                var sUpdatedUri = sUriPrefix; //includes the previous prefix (e.g abap path to the application) and the rest is the manifest path within target
                // remove last '/' if exists (e.g - when there is a prefix uri and manifest is directly under target)
                var indexOfLastSlash = sUpdatedUri.lastIndexOf("/");
                if (indexOfLastSlash === sUpdatedUri.length - 1) {
                    sUpdatedUri = sUpdatedUri.substring(0, indexOfLastSlash);
                }
                oManfiestDeploymentBlock.uri = sUpdatedUri;
            }
        }
    };

    function  updateManifestDatasourceUri(oManfiestApplicationBlock) {
        if (oManfiestApplicationBlock && oManfiestApplicationBlock.dataSources && oManfiestApplicationBlock.dataSources.mainService
            && oManfiestApplicationBlock.dataSources.mainService.uri) {
            if (oManfiestApplicationBlock.id && oManfiestApplicationBlock.applicationVersion && oManfiestApplicationBlock.applicationVersion.version) {
                // replace all "." with ""
                var replacedID = oManfiestApplicationBlock.id.split('.').join('');
                oManfiestApplicationBlock.dataSources.mainService.uri = "/" + replacedID + "-" + oManfiestApplicationBlock.applicationVersion.version + oManfiestApplicationBlock.dataSources.mainService.uri;
            }
        }
    };

    grunt.registerTask('devx-updateManifest', 'Update manifest.json for build', function() {
        grunt.log.writeln('Currently running the "devx-updateManifest" task.');
        var sManifestFile = grunt.config.data.dir.dist + "/manifest.json";
        var bManifestExists = grunt.file.exists(sManifestFile);
        if (bManifestExists){
            var oManifestJsonContent = grunt.file.readJSON(sManifestFile);
            if (oManifestJsonContent["sap.platform.hcp"]) {
                updateManifestDeploymentBlockUri(oManifestJsonContent["sap.platform.hcp"]);
            }
            if (oManifestJsonContent["sap.platform.abap"]) {
                updateManifestDeploymentBlockUri(oManifestJsonContent["sap.platform.abap"]);
            }
            // get deploy_mode flag from the Gruntfile.js of the module - will be exist only in case of html repo scenario
            var deployMode = grunt.config.get("deploy_mode");
            if (!!deployMode && deployMode === "html_repo") {
                updateManifestDatasourceUri(oManifestJsonContent["sap.app"]);
            }
            grunt.file.write(sManifestFile, JSON.stringify(oManifestJsonContent));
        }
    });

    grunt.registerTask('cleanTmp', 'Clean temp data created during the build', function() {
        //delete temp and debug dir
        grunt.file.delete(grunt.config.data.dir.tmpDirDbg);
        grunt.file.delete(grunt.config.data.dir.tmpDir);
    });

    grunt.registerTask('createResourcesJson', 'Create Resources.json file', function() {
        if (bIsComponentUnderRoot)
            createResourceJson(process.cwd());
        else
            createResourceJson(path.join(process.cwd(), "dist"));
    });

    grunt.registerTask('createsCachebusterInfoJson', 'Create sap-ui-cachebuster-info.json file', function() {
        if (bIsComponentUnderRoot)
            createCachebusterInfoJson(process.cwd());
        else
            createCachebusterInfoJson(path.join(process.cwd(), "dist"));
    });

// Build task - build will vary according to the location of the component.js file
// If the component.js is under the root - the build will not create a dist folder.
// In any other case - a dist file will be created.
    if(bIsComponentUnderRoot)
        grunt.registerTask('build', ['openui5_preload:preloadRootProject', "uglify:uglifyRootPreload", 'createResourcesJson', 'createsCachebusterInfoJson']);
    else
        grunt.registerTask('build', [
            'bundleChanges',
            "copy:copyToDbg",
            "copy:copyToTmp",
            "cssmin",
            "openui5_preload:preloadTmp",
            "copy:copyDbgToDist",
            "copy:copyProjectFilesToDist",
            "uglify:uglifyPreload",
            "copy:copyTmpToDist",
            'cleanTmp',
            'devx-updateNeoApp',
            'devx-updateManifest',
            'createResourcesJson',
            'createsCachebusterInfoJson',
            'cleanupChanges']);
};
