const assert = require('assert');
var expect = require('chai').expect;
var path = require('path');
var fs = require('fs');
var endOfLine = require('os').EOL;
var cp = require("child_process");

describe('code validation from grunt', function() {
    var projectDir = path.join(__dirname, "dummy");
    var logFile = path.join(projectDir, "grunt-build-test.log");//file as declare in the grunt file - resultFilePath option
    this.timeout(20000); // A very long environment setup.
    var execProcess;

    before(function () {
    });

    beforeEach(function () {
        console.log("in before each test ");
        if (fs.existsSync(logFile)) {
            console.log("in test - delete results file" + endOfLine);
            fs.unlinkSync(logFile);
        }
    });

    it('check webapp build', function(done) {
        console.log("check webapp build test - starting ");
        var workDir = process.cwd();
        console.log("in check validation workDir: " + workDir + endOfLine);
        execProcess = cp.exec('grunt', {cwd: path.join(__dirname, "dummy", "webappNewStructure")}, function (error, stdout, stderr) {
            if (error) {
                console.error('grunt call error ' + error);
                done(error);
            }
            if (stderr) {
                console.log('grunt stderr: ' + stderr);
            }
            if (stdout) {
                console.log('grunt stdout: ' + stdout);
            }

            var webAppContent = fs.readdirSync(path.join(__dirname, "dummy", "webappNewStructure"));
            expect(webAppContent).to.exists;
            var dist = fs.readdirSync(path.join(__dirname, "dummy", "webappNewStructure", "dist"));
            expect(dist).to.exists;
            var componentsPreload = fs.readFileSync(path.join(__dirname, "dummy", "webappNewStructure", "dist", "Component-preload.js"), "utf8");
            expect(componentsPreload).to.exists;
            var expectedCompPreload = fs.readFileSync(path.join(__dirname, "dummy", "ExpectedFiles", "webappNewStructure", "Component-preload.js"), "utf8");
            //expect(componentsPreload).to.equal(expectedCompPreload);
            var expectedNeoapp = fs.readFileSync(path.join(__dirname, "dummy", "ExpectedFiles", "webappNewStructure", "neo-app.json"), "utf8");
            var neoapp = fs.readFileSync(path.join(__dirname, "dummy", "webappNewStructure", "dist", "neo-app.json"), "utf8");
            //expect(neoapp).to.equal(expectedNeoapp);

            console.log('checking generated sap-ui-cachebuster-info.json file .' + stdout);
            var bSapUI5CachebusterInfoOK = true;
            var sCachebuster;
            var oCachebuster, oExpectedCachebuster;
            try{
                sCachebuster = fs.readFileSync (path.join (__dirname, "dummy", "webappNewStructure", "dist", "sap-ui-cachebuster-info.json"), "utf8");
                expect(sCachebuster).to.exists;
            }
            catch(err){
                bSapUI5CachebusterInfoOK = false;
                assert.isFalse(bSapUI5CachebusterInfoOK, 'fail to find/read file: sap-ui5-Cachebuster-info.json.');
            }
            var sExpectedCachebuster;
            if (bSapUI5CachebusterInfoOK) {
                try {
                    sExpectedCachebuster = fs.readFileSync (path.join (__dirname, "dummy", "ExpectedFiles", "webappNewStructure", "sap-ui-cachebuster-info.json"), "utf8");
                    expect(sExpectedCachebuster).to.exists;
                }
                catch(err)
                {
                    bSapUI5CachebusterInfoOK = false;
                    assert.isFalse(bSapUI5CachebusterInfoOK, 'fail to find/read file: sap-ui5-Cachebuster-info.json in expected diretory');
                }
                if (bSapUI5CachebusterInfoOK) {
                    console.log('checking sap-ui-cachebuster-info.json file found');
                    try {
                        oCachebuster = JSON.parse (sCachebuster);
                        oExpectedCachebuster = JSON.parse (sExpectedCachebuster);
                    }
                    catch(err) {
                        bSapUI5CachebusterInfoOK = false;
                        assert.isFalse(bSapUI5CachebusterInfoOK, 'fail to parse as sap-ui5-Cachebuster-info.json as json file.');
                    }
                    if (bSapUI5CachebusterInfoOK) {
                        var keysExpected = Object.keys (oExpectedCachebuster);
                        console.log("cache buster file content: " + sCachebuster);
                        console.log("expected cache buster file keys: " + sExpectedCachebuster);
                        expect(oCachebuster).to.have.all.keys(keysExpected);
                        console.log('check of sap-ui-cachebuster-info.json finished successfuly');
                    }
                }
            }
            console.log("check webapp build test - ending ");
            done();
        });
    });

    it('check mtaDummy build - manifest.json updated dist contains sources xs-app.json, test', function(done) {
        console.log("check mtaDummy build - manifest.json update task - starting ");

        var workDir = process.cwd();
        console.log("in check validation workDir: " + workDir + endOfLine);
        execProcess = cp.exec('grunt', {cwd: path.join(__dirname, "dummy", "mtaDummy", "CrudModule")}, function (error, stdout, stderr) {
            if (error) {
                console.error('grunt call error ' + error);
                done(error);
            }
            if (stderr) {
                console.log('grunt stderr: ' + stderr);
            }
            if (stdout) {
                console.log('grunt stdout: ' + stdout);
            }
            try {
                var moduleDistPath = path.join (__dirname, "dummy", "mtaDummy", "CrudModule", "dist");
                var sManifestJson = fs.readFileSync (path.join (moduleDistPath, "manifest.json"), "utf8");
                expect(sManifestJson).to.exists;
                var oManifest = JSON.parse(sManifestJson);
                var dataSourceUri = oManifest["sap.app"].dataSources.mainService.uri;
                expect(dataSourceUri).to.have.string("/nsCrudModule-1.0.0/");
            }
            catch(err)
            {
                expect(false).to.equal(true, "fail to update manifest.json file");
            }
            expect(fs.existsSync(path.join (moduleDistPath, "test"))).to.be.true;
            expect(fs.existsSync(path.join (moduleDistPath, "xs-app.json"))).to.be.true;
            console.log("check mtaDummy build - manifest.json update task - ending");

            done();
        });
    });

    after(function () {
    });

    afterEach(function () {
        //process.kill(execProcess);
    });
});