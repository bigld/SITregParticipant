const assert = require('assert');
var expect = require('chai').expect;
var path = require('path');
var fs = require('fs');
var grunt = require('grunt');
var rewire = require('rewire');
var openui5_UIAdaptionChangesPrivate = rewire('../tasks/openui5_UIAdaptionChanges');

const mock = require('mock-fs');

describe('level-0 changes files for smart templates UI adaptions', function () {

    var bundleChangesFunction = openui5_UIAdaptionChangesPrivate.__get__('bundleChanges');
    var cleanupChangesFunction = openui5_UIAdaptionChangesPrivate.__get__('cleanupChanges');
    var changes1 = fs.readFileSync(path.join(__dirname, 'dummy', 'uiAdaptionChangesFiles', 'id_1520511790962_102_propertyChange.change'));
    var changes2 = fs.readFileSync(path.join(__dirname, 'dummy','uiAdaptionChangesFiles', 'id_1520511855281_114_propertyChange.change'));

    function initGruntConfig(projectName, appFolder) {
        grunt.config.init({
            dir: {
                appFolder: path.join(__dirname, 'dummy', projectName, appFolder),
                dist: path.join(__dirname, 'dummy', projectName, 'dist'),
                tmpDir: path.join(__dirname, 'dummy', projectName, 'dist', 'tmp')
            }
        });
    }

    it('bundle level-0-changes', function () {
        initGruntConfig('lreport', 'webapp');
        mock({
            'test/dummy/lreport/webapp/changes': {
                'id_1520511790962_102_propertyChange.change': changes1,
                'id_1520511855281_114_propertyChange.change': changes2
            }
        });
        return bundleChangesFunction(grunt).then(() => {
            expect(fs.existsSync(path.join(__dirname, 'dummy', 'lreport', 'dist'))).to.be.true;
            expect(fs.existsSync(path.join(__dirname, 'dummy', 'lreport', 'dist', 'tmp', 'changes'))).to.be.true;
            expect(fs.existsSync(path.join(__dirname, 'dummy', 'lreport', 'dist', 'tmp', 'changes', 'changes-bundle.json'))).to.be.true;
            var files = fs.readdirSync(path.join(__dirname, 'dummy', 'lreport', 'dist', 'tmp', 'changes'));
            expect(files).to.have.length(1);

            var bundleChanges = fs.readFileSync(path.join(__dirname, 'dummy', 'lreport', 'dist', 'tmp', 'changes', 'changes-bundle.json'));
            var jsonBundleChanges = JSON.parse(bundleChanges);
            expect(jsonBundleChanges, 'bundle changes has wrong type').to.be.array;
            expect(jsonBundleChanges, 'bundle changes is incomplete').to.have.length(2);
            expect(jsonBundleChanges[0].fileName, 'bundle changes has no fileName').to.exist;
        });
    });

    it('cleanup dist changes', function () {
        var projectName = 'lreport';
        initGruntConfig(projectName, 'webapp');
        mock({
            'test/dummy/lreport/webapp/changes': {
                'id_1520511790962_102_propertyChange.change': changes1,
                'id_1520511855281_114_propertyChange.change': changes2
            }
        });

        var changesWebappFolder = path.join(__dirname, 'dummy', projectName, 'webapp', 'changes');

        return bundleChangesFunction(grunt).then(() => {
            var files = fs.readdirSync(changesWebappFolder);
            expect(files).to.have.length(2);

            var distChangesPath = path.join(__dirname, 'dummy', projectName, 'dist', 'changes');
            fs.mkdirSync(distChangesPath);
            files.forEach(function (file) {
                fs.createReadStream(path.join(changesWebappFolder, file)).pipe(fs.createWriteStream(path.join(distChangesPath, file)));
                //mock-fs bug. fails to copy: fs.copyFileSync(path.join(changesWebappFolder, file), path.join(distChangesPath, file));
            });

            return cleanupChangesFunction(grunt).then(() => {
                var files = fs.readdirSync(path.join(distChangesPath));
                expect(files).to.have.length(0);
            });
        });
    });

    it('no level-0-changes folder exits', function () {
        var projectName = 'lreport';
        initGruntConfig(projectName, 'webapp');
        mock({
            'test/dummy/lreport/webapp': {}
        });
        return bundleChangesFunction(grunt).then(() => {
            expect(fs.existsSync(path.join(__dirname, 'dummy', projectName, 'dist', 'tmp', 'changes'))).to.be.false;
        });
    });

    it('level-0-changes appFolder is project root', function () {
        var projectName = 'lreport';
        initGruntConfig(projectName, '');
        mock({
            'test/dummy/lreport/changes': {
                'id_1520511790962_102_propertyChange.change': changes1,
                'id_1520511855281_114_propertyChange.change': changes2
            }
        });
        return bundleChangesFunction(grunt).then(() => {
            expect(fs.existsSync(path.join(__dirname, 'dummy', 'lreport', 'dist'))).to.be.true;
            expect(fs.existsSync(path.join(__dirname, 'dummy', 'lreport', 'dist', 'tmp', 'changes'))).to.be.true;
            expect(fs.existsSync(path.join(__dirname, 'dummy', 'lreport', 'dist', 'tmp', 'changes', 'changes-bundle.json'))).to.be.true;
            var files = fs.readdirSync(path.join(__dirname, 'dummy', 'lreport', 'dist', 'tmp', 'changes'));
            expect(files).to.have.length(1);

            return bundleChangesFunction(grunt).then(() => {
                var bundleChanges = fs.readFileSync(path.join(__dirname, 'dummy', 'lreport', 'dist', 'tmp', 'changes', 'changes-bundle.json'));
                var jsonBundleChanges = JSON.parse(bundleChanges);
                expect(jsonBundleChanges, 'bundle changes has wrong type').to.be.array;
                expect(jsonBundleChanges, 'bundle changes is incomplete').to.have.length(2);
                expect(jsonBundleChanges[0].fileName, 'bundle changes has no fileName').to.exist;
            });
        });
    });

    it('level-0-changes grunt not configured', function () {
        var projectName = 'lreport';
        grunt.config.init({});
        mock({
            'test/dummy/lreport/changes': {
                'id_1520511790962_102_propertyChange.change': changes1,
                'id_1520511855281_114_propertyChange.change': changes2
            }
        });
        return bundleChangesFunction(grunt).then(() => {
            expect(fs.existsSync(path.join(__dirname, 'dummy', 'lreport', 'dist'))).to.be.false;
        });
    });

    it('fails with exception', function () {
        var projectName = 'lreport';
        initGruntConfig(projectName, 'webapp');
        mock({
            'test/dummy/lreport/webapp/changes': changes1//a file instead of folder
        });
        return bundleChangesFunction(grunt).catch((err) => {
            expect(fs.existsSync(path.join(__dirname, 'dummy', 'lreport', 'dist'))).to.be.false;
        });
    });

    afterEach(function () {
        mock.restore();

    });
});