var fioriSchemaUtil = require('./fioriSchemaUtil.js');
var getSchema = require('../../getSchema.js');

var appDescriptorSchema = [];
function clone(obj) {
    return JSON.parse(JSON.stringify(obj));
}
function merge(obj, src) {
    Object.keys(src).forEach(function(key) { obj[key] = src[key]; });
    return obj;
}

module.exports = {

    baseSchemaUrl : __dirname + "/schema/",

    getSchema : function(oJson, envType){
        return this.getFlatSchema(oJson, envType);
    },

    getHelpURL: function(){
        return "https://sapui5.hana.ondemand.com/#docs/guide/be0cf40f61184b358b5faedaec98b2da.html";

    },

    _buildSchemaUrl : function(version, relativePath){
        return (!version || version === "*") ? this.baseSchemaUrl+relativePath : this.baseSchemaUrl+ version+"/" + relativePath;
    },
    _getRootSchema : function(oManifestJson){
        var version = "*";
        if (oManifestJson && oManifestJson._version) {
            var versionNumbering = oManifestJson._version.split(".");
            if (versionNumbering.length > 1 && versionNumbering[0] === "1" && versionNumbering[1] > "3") {
                 version = oManifestJson._version;

            }
        }

        if(appDescriptorSchema[version]){
            return  appDescriptorSchema[version];//nodejs: removed Q
        }else{
            var sUrl = this._buildSchemaUrl(version, "schema.json");
            var that = this;
            //nodejs: no Q return
            var oSchema = getSchema._getRemoteResource(sUrl);
            //TODO: promises?
            oSchema = clone(oSchema);
            that._getRefs(oSchema, version);
            appDescriptorSchema[version] = oSchema;
            return oSchema;
        }
    },

    _getPropertyVersionFromUserInput : function(oManifestJson, sPropertyName){
       if(oManifestJson && oManifestJson[sPropertyName]){
           return oManifestJson._version;
       }
    },

    getFlatSchema : function(oManifestJson, envType){
        var that = this;
        var appDescriptorSchema = this._getRootSchema(oManifestJson);
        var oSchema = clone(appDescriptorSchema);
        var aProperties = oSchema.properties;
        for (sPropertyName in aProperties) {
            if (aProperties.hasOwnProperty(sPropertyName)) {
                var oProperty = aProperties[sPropertyName];
                var sVersion = that._getPropertyVersionFromUserInput(oManifestJson, sPropertyName);
                fioriSchemaUtil.getSubSchemasByVersion(oProperty, sVersion, sPropertyName, envType);
            }
        }
        return oSchema;
    },



    _getRefs : function(oSchema, version){
        var that = this;
        for (key in oSchema) {
            if (oSchema.hasOwnProperty(key)) {
                var val = oSchema[key];
                if (val !== null && typeof val === 'object') {
                    that._getRefs(val, version);
                }else{
                    if(key === "$ref"){
                        var url = that._buildSchemaUrl(version, val);
                        var refSchema = getSchema._getRemoteResource(url);
                        delete oSchema["$ref"];
                        merge(oSchema, refSchema);
                    }
                }
            }
        }
    }
}
